create database assign1;

create schema assign1.practice1;

create table employee_table (
    emp_id int,
    name varchar(25),
    age int,
    salary int,
    department_id int,
    hire_date date
)

create or replace sequence SEQ1 WITH START = 1 INCREMENT = 1 ORDER comment = 'my first sequence defalut NOORDER';
-- delete from employee_table

show sequences;

-- select SEQ1.nextval;

insert into assign1.practice1.employee_table values (SEQ1.nextval, 'JohnDoe', 28, 50000, 1, '2020-01-15');
update employee_table SET name = 'John Doe' where emp_id = 1;

insert into assign1.practice1.employee_table values 
    (SEQ1.nextval, 'Jane Smith', 34, 60000, 2, '2019-07-23'), 
    (SEQ1.nextval, 'Bob Brown', 45, 80000, 1, '2018-02-12'),
    (SEQ1.nextval, 'Alice Blue', 25, 45000, 3, '2021-03-22'),
    (SEQ1.nextval, 'Charlie P.', 29, 50000, 2, '2019-12-01');

select * from employee_table


create table department_table (
    department_id int, 
    name varchar(25)
)

insert into department_table values
    (1, 'IT'),
    (2, 'HR'),
    (3, 'Finance'),
    (4, 'Marketing');

select * from department_table;


create table project_table (
    project_id int,
    name varchar(25),
    department_id int
)

insert into project_table values 
    (1, 'Project Alpha', 1),
    (2, 'Project Beta', 2),
    (3, 'Project Gamma', 1),
    (4, 'Project Delta', 3),
    (5, 'Project Epsilon', 4);

select * from project_table 

-- delete from project_table


---------------------------------------------------------------------------------------------------

-- BASIC QUERIES

--1. Select all the columns from the employee table
select * from employee_table;

--2. Select only the name and salary columns from the employee table
select name, salary from employee_table;

--3. Select employees who are older than 30
select * from employee_table 
WHERE age > 30; 

--4, Select the names of all the departments
select name from department_table

--5. Select employees who work in the IT department
select * from employee_table
WHERE department_id in (select department_id from department_table WHERE name = 'IT');



--------------------------------------------------------------------------------------------------

--STRING MATCHING QUERIEs

--6. Select employees whose names start with 'j'
select name from employee_table
WHERE lower(name) like 'j%';

--7. Select employees whose names end with 'e'
select name from employee_table
WHERE name like '%e';

--8.Select employees whose names contain 'a'
select name from employee_table
WHERE name like '%a%';

--9. Select employees whose names are exactly 9 characters long
select name from employee_table
WHERE length(name) = 9;

--10. Select employees whose names have 'o' as the second character
select name from employee_table
WHERE name like '_o%';


-----------------------------------------------------------------------------------------------------------


-- DATA QUERIES

-- 11. Select employees hired in the year 2020
select * from employee_table

select * from employee_table
WHERE 



-- 12. Select employees hired in January of any year


-- 13. Select employees hired before 2019
select * from employee_table
WHERE hire_date < '2019-01-01';

-- 14. Select employees hired on or after March 1,2021
select * from employee_table
WHERE hire_date >= '2021-03-01';

-- 15. Select employees hired in the last 2 years



-------------------------------------------------------------------------------------------------------

-- AGGREGATE QUERIES

select * from employee_table

-- 16. Select the total salry of all employees
select sum(salary) as Total_Salary from employee_table;

-- 17. Select the average salary of employees
select avg(salary) as Avg_Salary_0f_Employees from employee_table;

-- 18. Select the minimum salary in the Employee table
select min(salary) from employee_table

--19. Select the number of employees in ecah department
select department_id, count(*) from employee_table
group by department_id;

-- 20.Select the average salary of employees in each department
select department_id, avg(salary) from employee_table
group by department_id;


------------------------------------------------------------------------------------------------------

-- Group By Queries

select * from employee_table

-- 21. Select the total salary for each department
select department_id, sum(salary) Dept_wise_Total_Salary from employee_table
group by department_id;

-- 22. Select the average age of employees in each department
select department_id, avg(age) Dept_wise_Avg_Age from employee_table
group by department_id;

-- 23. Select the number of employees hired in each year


-- 24. Select the highest salary in seach department
select department_id, max(salary) Dept_wise_Highest_Salary from employee_table
group by department_id;

-- 25. Select the department with the highest average salary

-- select department_id, max(dept_wise_Avg_Sal) from employee_table
-- WHERE department_id, avg(salary) dept_wise_Avg_Sal IN (select department_id, avg(salary) from employee_table
-- GROUP BY department_id);

select department_id, avg(salary) dept_wise_Avg_Sal from employee_table
GROUP BY department_id
-- order by dept_wise_Avg_Sal desc
LIMIT 1;


-- NOTE : Aggregate functions cannot be nested:



------------------------------------------------------------------------------------------------------------


-- HAVING QUERIES

--26. Select departments with more than 2 employees
select department_id, count(emp_id) from employee_table
GROUP BY department_id
HAVING count(emp_id) > 2;

--27. Select departments with an average salary greater than 55000
select department_id, avg(salary) from employee_table
GROUP BY department_id
HAVING avg(salary)> 55000;


--28. Select years with more than 1 employee hired


--29. Select departments with a total salary less than 100000
select department_id, SUM(salary) Dept_Total_Salary from employee_table
GROUP BY department_id
HAVING SUM(salary) < 100000;

--30. Select departments with the maximum salary above 75000
select department_id, SUM(salary) Dept_Total_Salary from employee_table
GROUP BY department_id
HAVING SUM(salary) > 75000;


-----------------------------------------------------------------------------------------------

-- ORDER BY QUERIES
--31. Select all employees ordered by their salary in ascending order
select * from employee_table
ORDER BY salary ASC;

--32. Select all employees ordered by their age in descendig order
select * from employee_table
ORDER BY age DESC;

--33. Select all employees orderd by their hire date in ascending order
select * from employee_table
ORDER BY hire_date ASC;

--34. Select employees orderd by their department and then by their salary.
select * from employee_table
ORDER BY department_id AND salary;

--35. Select departments ordered by the total salary of their employees
select department_id, SUM(salary) Dept_Total_Sal from employee_table
GROUP BY department_id
ORDER BY Dept_Total_Sal;

----------------------------------------------------------------------------------------------------

--JOIN QUERIES

--36. Select Employee names along with their department names
select emp.name, dept.name from employee_table emp
INNER JOIN
department_table dept
on emp.department_id= dept.department_id;


--37. Select project names along with the department names they belong to.
select project.name Project, dept.name as Dept from department_table dept
INNER JOIN
project_table project
on dept.department_id = project.department_id;

--38. Select employee names and their corresponding project names
select emp.name Emp_Name, project.name Project_Name from employee_table as emp
INNER JOIN
project_table as project
on emp.department_id = project.department_id;

--39. Select all employees and their departments,including those without a department
select emp.name Emp_Name, dept.name Dept_Name from employee_table emp
LEFT OUTER JOIN
department_table dept
on emp.department_id = dept. department_id;

--40. Select all departments and their employees, including departmets without employees
select dept.name Dept_Name, emp.name Emp_Name from employee_table emp
RIGHT OUTER JOIN
department_table dept
on emp.department_id = dept.department_id;

--41. Select employees who are not assigned to any projects
select emp.department_id Dept_ID, emp.name Emp_Names, project.name Project_Names from employee_table emp
LEFT OUTER JOIN
project_table project
on project.department_id = emp.department_id
WHERE Project_Names IS null;

select * from employee_table;
select * from project_table;

--employee joined in new department '5'
insert into assign1.practice1.employee_table values (SEQ1.nextval, 'RamCharan', 28, 75000, 5, '2024-01-15');



--42. Select employees and the number of projects their departments is working on
select emp.name Emp_Name,  Count(project.department_id) Number_of_Projects from employee_table as emp
INNER JOIN
project_table as project
on emp.department_id = project.department_id
GROUP BY Emp_Name;


select emp.name Emp_Name, dept.name Dept_Name, Count(project.department_id) Number_of_Projects from department_table as dept
INNER JOIN
project_table as project
on dept.department_id = project.department_id
INNER JOIN
employee_table as emp
on emp.department_id = dept.department_id
GROUP BY Dept_Name, Emp_Name;


--43. Select the departments that have no employees
select emp.name Emp_Name, dept.name Dept_Name from employee_table emp
RIGHT OUTER JOIN
department_table as dept
on emp.department_id = dept.department_id
WHERE Emp_Name IS null;

--44. Select employee names who share the same department with 'John Doe'.
select emp.name from employee_table emp
WHERE department_id IN 
    (select department_id from employee_table emp Where lower(emp.name) = 'john doe')
AND lower(emp.name) != 'john doe';

-- select * from employee_table;



--45. Select the department name with the highest average salary
select dept.name Dept_Name, AVG(emp.salary) from employee_table as emp
INNER JOIN
department_table as dept
on emp.department_id = dept.department_id
GROUP BY Dept_Name
LIMIT 1;
